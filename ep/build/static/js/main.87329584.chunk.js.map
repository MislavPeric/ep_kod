{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","tasks","setTasks","update","setUpdate","name","setName","useEffect","fetch","then","res","json","console","log","className","style","fontSize","padding","map","x","index","type","checked","completed","onChange","i","newTasks","handleChange","onClick","id","method","body","JSON","stringify","task_name","value","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAyFeA,MAtFf,WAAgB,IAAD,EACaC,qBADb,mBACNC,EADM,KACCC,EADD,OAEeF,oBAAS,GAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGWJ,mBAAS,IAHpB,mBAGNK,EAHM,KAGAC,EAHA,KAsDb,OAjDAC,qBAAU,WACRC,MAAM,cACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASE,QAAQC,IAAIH,QAC5B,CAACP,IA8CF,sBAAKW,UAAU,MAAf,UACE,mBAAGC,MAAO,CAAEC,SAAU,GAAIC,QAAS,IAAnC,uBACA,yBAAQH,UAAU,aAAlB,UACE,qBAAKA,UAAU,iBAAf,SACGb,EAAMiB,KAAI,SAACC,EAAGC,GACb,OACE,sBAAKN,UAAU,gBAAf,UACE,wBAAOA,UAAU,YAAjB,UACE,uBACEO,KAAK,WACLC,QAASH,EAAEI,UACXC,SAAU,kBAvDP,SAACC,GACpB,IAAMC,EAAWzB,EAAMiB,KAAI,SAACC,EAAGC,GAC7B,OAAIK,IAAML,GACRD,EAAEI,WAAaJ,EAAEI,UACVJ,GAEAA,KAIXf,GAAWD,GACXD,EAASwB,GA4CuBC,CAAaP,MAE/B,sBAAMN,UAAU,iBAElB,mBAAGA,UAAU,YAAYc,QAAS,kBA3BxBH,EA2B6CN,EAAEU,GA1BrErB,MAAM,oBAAqB,CACzBsB,OAAQ,SACRC,KAAMC,KAAKC,UAAU,CACnBR,aAIJrB,GAAWD,GARU,IAACsB,GA2BV,SACGN,EAAEe,oBAMb,wBAAQN,QAxCG,WACfpB,MAAM,wBAENJ,GAAWD,IAqCP,6CApBF,IAoBiE,uBAC/D,mBAAGY,MAAO,CAAEC,SAAU,IAAtB,mCArBF,IAqBwD,uBACtD,uBAAOK,KAAK,OAAOc,MAAO9B,EAAMmB,SAAU,SAACY,GAAD,OAAO9B,EAAQ8B,EAAEC,OAAOF,UAtBpE,IAsB+E,uBAC7E,wBAAQP,QAvDK,WACjBpB,MAAM,oBAAqB,CACzBsB,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CACnB5B,WAIJD,GAAWD,IA+CP,oCCvEOmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.87329584.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [tasks, setTasks] = useState();\n  const [update, setUpdate] = useState(false);\n  const [name, setName] = useState('')\n\n  useEffect(() => {\n    fetch(\"/api/tasks\")\n      .then((res) => res.json())\n      .then((res) => console.log(res));\n  }, [update]);\n\n  const handleChange = (i) => {\n    const newTasks = tasks.map((x, index) => {\n      if (i === index) {\n        x.completed = !x.completed;\n        return x;\n      } else {\n        return x;\n      }\n    });\n\n    setUpdate(!update);\n    setTasks(newTasks);\n  };\n\n  const insertInto = () => {\n    fetch(\"/api/tasks/insert\", {\n      method: \"PUT\",\n      body: JSON.stringify({\n        name\n      })\n    })\n\n    setUpdate(!update)\n\n  };\n\n  const checkAll = () => {\n    fetch(\"/api/tasks/check_all\")\n\n    setUpdate(!update);\n  };\n\n  const deleteSelected = (i) => {\n    fetch(\"/api/tasks/insert\", {\n      method: \"DELETE\",\n      body: JSON.stringify({\n        i\n      })\n    })\n\n    setUpdate(!update);\n  }\n\n  return (\n    <div className=\"App\">\n      <p style={{ fontSize: 48, padding: 20 }}>Todo list</p>\n      <header className=\"App-header\">\n        <div className=\"outerContainer\">\n          {tasks.map((x, index) => {\n            return (\n              <div className=\"taskContainer\">\n                <label className=\"container\">\n                  <input\n                    type=\"checkbox\"\n                    checked={x.completed}\n                    onChange={() => handleChange(index)}\n                  />\n                  <span className=\"checkmark\"></span>\n                </label>\n                <p className='deletable' onClick={() => deleteSelected(x.id)}>\n                  {x.task_name}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n        <button onClick={checkAll}>OznaÄ‡i sve todo kao gotove</button> <br />\n        <p style={{ fontSize: 24}} >Unesi ime novog taska</p> <br/>\n        <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} /> <br />\n        <button onClick={insertInto}>Dodaj novi todo</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
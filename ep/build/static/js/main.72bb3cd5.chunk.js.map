{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","tasks","setTasks","update","setUpdate","name","setName","useEffect","fetch","then","res","json","length","className","style","fontSize","padding","map","x","type","checked","completed","onChange","i","id","method","headers","body","JSON","stringify","onClick","task_name","value","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMA0GeA,MAvGf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,oBAAS,GAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGWJ,mBAAS,IAHpB,mBAGNK,EAHM,KAGAC,EAHA,KA8Db,OAzDAC,qBAAU,WACRC,MAAM,uBACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAC,GAAG,OAAIR,EAASQ,QACvB,CAACP,IAqDiB,IAAjBF,EAAMW,OACD,KAGL,sBAAKC,UAAU,MAAf,UACE,mBAAGC,MAAO,CAAEC,SAAU,GAAIC,QAAS,IAAnC,uBACA,yBAAQH,UAAU,aAAlB,UACE,qBAAKA,UAAU,iBAAf,SACGZ,EAAMgB,KAAI,SAACC,GACV,OACE,sBAAKL,UAAU,gBAAf,UACE,wBAAOA,UAAU,YAAjB,UACE,uBACEM,KAAK,WACLC,QAASF,EAAEG,UACXC,SAAU,kBAlERC,EAkE2BL,EAAEM,GAjEjDhB,MAAM,8BAA+B,CACnCiB,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBN,aAIJnB,GAAWD,GAZQ,IAACoB,KAoEJ,sBAAMV,UAAU,iBAElB,mBAAGA,UAAU,YAAYiB,QAAS,kBAlC1BP,EAkC+CL,EAAEM,GAjCvEhB,MAAM,8BAA+B,CACnCiB,OAAQ,SACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBN,aAIJnB,GAAWD,GAZU,IAACoB,GAkCR,SACGL,EAAEa,oBAMb,wBAAQD,QA/CC,WACftB,MAAM,yBAENJ,GAAWD,IA4CL,6CApBF,IAoBiE,uBAC/D,mBAAGW,MAAO,CAAEC,SAAU,IAAtB,mCArBF,IAqBwD,uBACtD,uBACEI,KAAK,OACLa,MAAO3B,EACPiB,SAAU,SAACW,GAAD,OAAO3B,EAAQ2B,EAAEC,OAAOF,UACjC,IACH,uBACA,wBAAQF,QAtEG,WACjBtB,MAAM,qBAAsB,CAC1BiB,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBxB,WAIJD,GAAWD,IA0DL,oCCvFKgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.72bb3cd5.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [update, setUpdate] = useState(false);\n  const [name, setName] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"/api/tasks/get_all/\")\n      .then((res) => res.json())\n      .then(res => setTasks(res))\n  }, [update]);\n\n  const handleChange = (i) => {\n    fetch(\"/api/tasks/change_selected/\", {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        i,\n      }),\n    });\n\n    setUpdate(!update);\n  };\n\n  const insertInto = () => {\n    fetch(\"/api/tasks/insert/\", {\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name,\n      }),\n    });\n\n    setUpdate(!update);\n  };\n\n  const checkAll = () => {\n    fetch(\"/api/tasks/check_all/\");\n\n    setUpdate(!update);\n  };\n\n  const deleteSelected = (i) => {\n    fetch(\"/api/tasks/delete_selected/\", {\n      method: \"DELETE\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        i,\n      }),\n    });\n\n    setUpdate(!update);\n  };\n\n  if (tasks.length === 0) {\n    return null;\n  } else {\n    return (\n      <div className=\"App\">\n        <p style={{ fontSize: 48, padding: 20 }}>Todo list</p>\n        <header className=\"App-header\">\n          <div className=\"outerContainer\">\n            {tasks.map((x) => {\n              return (\n                <div className=\"taskContainer\">\n                  <label className=\"container\">\n                    <input\n                      type=\"checkbox\"\n                      checked={x.completed}\n                      onChange={() => handleChange(x.id)}\n                    />\n                    <span className=\"checkmark\"></span>\n                  </label>\n                  <p className=\"deletable\" onClick={() => deleteSelected(x.id)}>\n                    {x.task_name}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n          <button onClick={checkAll}>OznaÄ‡i sve todo kao gotove</button> <br />\n          <p style={{ fontSize: 24 }}>Unesi ime novog taska</p> <br />\n          <input\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />{\" \"}\n          <br />\n          <button onClick={insertInto}>Dodaj novi todo</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}